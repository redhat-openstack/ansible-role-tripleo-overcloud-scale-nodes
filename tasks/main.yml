---
# tasks file for ansible-role-tripleo-overcloud-scale-nodes

# TODO: 1. Abstract type of node to be scaled
# TODO: 2. Add overcloud validation post scale
# TODO: 3. Add 'remove node' post validation
# TODO: 4. Add overcloud validation post 'remove node'

# Prep for scale
- name: Determine initial number of node(s) that will be scaled
  shell: >
    source "{{ artosn_working_dir }}/stackrc";
    nova list | grep "{{ node_to_scale }}" | cut -f2- -d':' | wc -l
  register: initial_node_count

- name: Copy scale deployment template to undercloud
  template:
    src: scale-deployment.j2
    dest: "{{ artosn_working_dir }}/scale-deployment.sh"
    mode: 0755

# Do the scale
- name: Call scale deployment script
  shell: >
    source "{{ artosn_working_dir }}/stackrc";
    "{{ artosn_working_dir }}"/scale-deployment.sh &> overcloud_deployment_scale_console.log;

- name: Poll heat stack-list to determine when node scale is complete
  shell: >
    source "{{ artosn_working_dir }}"/stackrc;
    heat stack-list
  register: heat_stack_list_result
  until: heat_stack_list_result.stdout.find("COMPLETE") != -1
  retries: 10
  delay: 180

# Verify the scale
- name: Determine the post scale node count
  shell: >
    source "{{ artosn_working_dir }}/stackrc";
    nova list | grep "{{ node_to_scale }}" | cut -f2- -d':' | wc -l
  register: post_scale_node_count

- name: Check that post scale node count is correct
  fail: msg="Overcloud nova list does not show expected number of {{ node_to_scale }} services"
  when: post_scale_node_count.stdout != "{{ final_scale_value }}"

# TODO: Validate the overcloud

# Delete the scaled node
- name: Check the overcloud heat stack state
  shell: >
    source "{{ artosn_working_dir }}"/stackrc;
    heat stack-list
  register: heat_stack_list_result

- name: Verify the overcloud is in a complete state
  fail: msg='Overcloud heat stack is not in a complete state'
  when: heat_stack_list_result.stdout.find('COMPLETE') == -1

- name: Get id for the overcloud stack
  shell: >
    source "{{ artosn_working_dir }}"/stackrc;
    heat stack-list | grep overcloud | sed -e 's/|//g' | awk '{print $1}'
  register: overcloud_id

- name: Get id for the node to be deleted
  shell: >
    source "{{ artosn_working_dir }}"/stackrc;
    nova list | grep -m 1 "{{ node_to_scale }}" | sed -e 's/|//g' | awk '{print $1}'
  register: node_id_to_delete

- name: get name of node to be deleted
  shell: >
    source "{{ artosn_working_dir }}"/stackrc;
    nova list | grep -m 1 "{{ node_to_scale }}" | sed -e 's/|//g' | awk '{print $2}'
  register: node_name_to_delete

- name: Copy delete node script to undercloud
  template:
    src: delete-node.j2
    dest: "{{ artosn_working_dir }}/delete-node.sh"
    mode: 0755

- name: Delete node by id
  shell: >
    cat "{{ artosn_working_dir }}"/delete-node.sh;
    "{{ artosn_working_dir }}"/delete-node.sh

# Verify the delete was successful
- name: Poll heat stack-list to determine when node delete is complete
  shell: >
    source "{{ artosn_working_dir }}"/stackrc;
    heat stack-list
  register: heat_stack_list_result
  until: heat_stack_list_result.stdout.find("COMPLETE") != -1
  retries: 10
  delay: 180

- name: Determine the post scale node count
  shell: >
    source "{{ artosn_working_dir }}/stackrc";
    nova list | grep "{{ node_to_scale }}" | cut -f2- -d':' | wc -l
  register: post_scale_node_count

- name: Check that post delete node count is correct
  fail: msg="Overcloud nova list does not show expected number of {{ node_to_scale }} services"
  when: post_scale_node_count.stdout != "{{ initial_scale_value }}"

# TODO: Validate the overcloud
